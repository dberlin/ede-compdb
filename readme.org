#+TITLE: Emacs Development Environment (EDE) wrapper for Compilation Database projects
#+OPTIONS: H:4
#+AUTHOR: Alastair Rankine
#+EMAIL: alastair@girtby.net

EDE-compdb is a library that enables the Emacs Development Environment (EDE), which is part of [[http://cedet.sourceforge.net/][CEDET]], to be used with a [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][compilation database]]. This enables CEDET to be automatically configured for use to support parsing, navigation, completion, and so on. This is especially useful for C and C++ projects which are otherwise quite tricky to configure for use with CEDET.

Features:
- Reads compilation database on-demand and provides include paths and preprocessor symbols to the Semantic parser
- For GCC-compatible compilers, reads the internal include paths (no need to use ~semantic-gcc-setup~)
- Many EDE commands supported, such as "C-c . c" to build the current target (source file)
- Autoloads based on the presence of ~compile_commands.json~ file, with no additional configuration typically required

License: GPLv2

** Quickstart

Download/clone the ~ede-compdb~ repo to a suitable directory and add it to your emacs ~load-path~. Add it to your ~.emacs~ file after loading CEDET, using:

#+BEGIN_SRC emacs-lisp
  (require 'ede-compdb)
#+END_SRC

Next you shoud ensure create the compilation database. If you are using [[http://www.cmake.org][CMake]] you can do something like the following:

#+BEGIN_EXAMPLE
$ cd .../yourproj
$ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE .
#+END_EXAMPLE

This will generate build files in the source directory, as well as a ~compile_commands.json~ file, which is the compilation database.

Now open any of your source files in emacs, and you should see all the includes correctly parsed. Be aware that due to a limitation in the current CEDET, if you use "Summarize includes current buffer" you will *NOT* see the project include path for the current source file.

** Build Directories

The quickstart example above assumes that you are building your binaries into the same directory

With a bit of extra effort, EDE-compdb can be configured to use a separate build directory, or even multiple build directories.

The trick is that when the ~ede-compdb-project~ object is instantiated, you can give it additional options. The following example should illustrate:

#+BEGIN_SRC emacs-lisp
    (ede-add-project-to-global-list
     (ede-compdb-project "YOURPROJ"
                         :configurations '("Debug" "Release" "RelWithDebInfo" "MinSizeRel")
                         :configuration-directories '("build.dbg" "build.rel" "build.r+d" "build.min")
                         :build-command "make -k all"
                         ))
#+END_SRC

In this example, we have four different build directories, corresponding to four different configurations (which also happen to be the default configurations supported by CMake). When you switch to a new configuration using ~M-x ede-project-configurations-set~, or the Development menu, you will switch to a new compilation database, and it will be re-read as needed.

The ~:build-command~ attribute sets the command to be used to build the entire project. This is available using the existing EDE shortcuts (eg "C-c . C" by default). This command is run from the current configuration directory.

** Compilation Database

A [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][compilation database]] provides a way for tools to get access to the compilation commands that are to be executed for a given source file. The following is an example of a compilation database entry:

#+BEGIN_SRC js
  {
      "directory": "/home/user/llvm/build",
      "command": "/usr/bin/clang++ -Irelative -DSOMEDEF=\"With spaces, quotes and \\-es.\" -c -o file.o file.cc",
      "file": "file.cc"
  },
#+END_SRC

This information is very useful for tools like CEDET, as it enables the tool to unambiguously determine the include paths and preprocessor definitions for C and C++ source files. This information is otherwise quite difficult to determine automatically, and most current tools typically require it to be provided redundantly (eg once in the build tool input file and again in an EDE project).

When CEDET is able to use the information in a compilation database, it significantly simplifies the configuration and setup of a typical C/C++ project, and possibly helps with other languages/projects. Furthermore it helps to improve the accuracy of the parser and provide many other benefits besides.

So how is the compilation database generated? Several methods are possible:

- For CMake-based projects using the GNU Make build tool, there is the ~CMAKE_EXPORT_COMPILE_COMMANDS~ option (described above) which tells CMake to write out a ~compile_commands.json~ file along with the generated Makefiles in the build directory. This file contains the entire compilation database for the project.
- For projects using the [[http://martine.github.io/ninja/][Ninja build tool]], the compilation database can be generated on-demand using the "-t compdb" command, either for the entire project, or for a specific source file. This is currently not supported with ede-compdb, but is planned.
- The [[https://github.com/rizsotto/Bear][Build EAR]] (Bear) tool can generate a compilation database from any build system by sniffing the compiler commands as they are executed.

Use of the compilation database is becoming more and more common, particularly for those projects using the clang toolset.

** Limitations/To Dos

The 'test' directory contains an example c++ project which can be used for testing purposes. For example:

cd .../ede-compdb/test
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE .

From here you create the EDE project simply by pointing the :file attribute at the compile_commands.json file. For example:

(ede-add-project-to-global-list (ede-compdb-project "test" :file "compile_commands.json"))

If all goes well, the project should load and the include path should be set correctly for each source file. This file is watched at reloaded if a change in size or mod time is detected.

There is an ert test suite which basically checks the above process works in an automated fashion, although it uses a temp directory as a build directory.

** Current limitations/TODOs:

- As stated above, if you use "Summarize includes current buffer" you will *NOT* see the system include path for the buffer. The reason is that the include path is set on the target, and not on the project. However, the summarize function only prints out the system include path for the project, and not the target. You can of course use ~(ede-system-include-path ede-object)~ to check the include path instead.

- It only does very basic parsing of the GCC (or compatible) command line options, and doesn't support any of the more esoteric GCC-specfic ones such as "-imacros", "-idirafter", "-iprefix", etc.

- Currently uses the json module for loading the compilation database. We'll keep an eye on this to see what the performance is like, but it looks OK so far.

- Calculating the preprocessor directives for a header file is not supported yet. I guess the solution here would be to look up a source file which includes the file in the current project, and use that include path. For example if you were trying to parse "foo.hpp", you might look up "foo.cpp" in the compilation database and use that compilation database entry to parse the .hpp file.
